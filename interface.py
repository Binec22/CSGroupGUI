# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'final2.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtWebEngineWidgets
import sys
import os
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from fonctions import *


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("SeaTraj v1.0")
        MainWindow.resize(1101, 823)

        #########################################################################
        ### Déclaration des variables que l'on va réutiliser pour les calculs ###
        #########################################################################

        self.file_path = None
        self.latitude = None
        self.longitude = None
        self.vitesse = None
        self.cap = None
        self.pas_de_temps = None
        self.trajectoire_selectionnee = None
        self.nombre_generation = 0

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")

        ###################################################
        ###################################################
        ##### Zone de gauche avec tous les paramètres #####
        ###################################################
        ###################################################

        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setMinimumSize(QtCore.QSize(315, 0))
        self.scrollArea.setMaximumSize(QtCore.QSize(500, 16777215))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 335, 762))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")

        ####################
        ### Logo CSGroup ###
        ####################

        self.CSGroup_logo = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CSGroup_logo.sizePolicy().hasHeightForWidth())
        self.CSGroup_logo.setSizePolicy(sizePolicy)
        self.CSGroup_logo.setMinimumSize(QtCore.QSize(70, 40))
        self.CSGroup_logo.setMaximumSize(QtCore.QSize(70, 70))
        self.CSGroup_logo.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.CSGroup_logo.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.CSGroup_logo.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(os.path.dirname(__file__), 'Logos/CSGroupLogo.png'))), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.CSGroup_logo.setIcon(icon)
        self.CSGroup_logo.setIconSize(QtCore.QSize(70, 70))
        self.CSGroup_logo.setFlat(True)
        self.CSGroup_logo.setObjectName("CSGroup_logo")
        self.verticalLayout.addWidget(self.CSGroup_logo, 0, QtCore.Qt.AlignHCenter)

        ################################################################
        ### CONFIGURATION DU BOUTON POUR SELECTIONNER LE FICHIER XML ###
        ################################################################

        self.xml_verticalLayout = QtWidgets.QVBoxLayout()
        self.xml_verticalLayout.setContentsMargins(-1, 0, -1, -1)
        self.xml_verticalLayout.setObjectName("xml_verticalLayout")

        self.parcourir_xml_horizontalLayout = QtWidgets.QHBoxLayout()
        self.parcourir_xml_horizontalLayout.setObjectName("parcourir_xml_horizontalLayout")
        self.parcourir_xml_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.parcourir_xml_label.setFont(font)
        self.parcourir_xml_label.setObjectName("parcourir_xml_label")
        self.parcourir_xml_horizontalLayout.addWidget(self.parcourir_xml_label)

        self.parcourir_xml_pushButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.parcourir_xml_pushButton.sizePolicy().hasHeightForWidth())
        self.parcourir_xml_pushButton.setSizePolicy(sizePolicy)
        self.parcourir_xml_pushButton.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.parcourir_xml_pushButton.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(os.path.dirname(__file__), "Logos/folder.svg"))), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.parcourir_xml_pushButton.setIcon(icon)
        self.parcourir_xml_pushButton.setObjectName("parcourir_xml_pushButton")
        self.parcourir_xml_horizontalLayout.addWidget(self.parcourir_xml_pushButton)
        self.parcourir_xml_pushButton.clicked.connect(self.ouvrirFichierXML)

        self.xml_verticalLayout.addLayout(self.parcourir_xml_horizontalLayout)

        ################################################################################################
        ### Zone de texte indiquant le nom du fichier sélectionné + bouton modifier pour le modifier ###
        ################################################################################################

        self.modifier_horizontalLayout = QtWidgets.QHBoxLayout()
        self.modifier_horizontalLayout.setContentsMargins(-1, 0, -1, -1)
        self.modifier_horizontalLayout.setObjectName("modifier_horizontalLayout")
        self.nom_xml_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        iconModifier = QtGui.QIcon()
        iconModifier.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(os.path.dirname(__file__), 'Logos/edit.svg'))), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.nom_xml_label.setFont(font)
        self.nom_xml_label.setObjectName("nom_xml_label")
        self.modifier_horizontalLayout.addWidget(self.nom_xml_label)

        self.modifier_pushButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.modifier_pushButton.sizePolicy().hasHeightForWidth())
        self.modifier_pushButton.setSizePolicy(sizePolicy)
        self.modifier_pushButton.setMinimumSize(QtCore.QSize(100, 0))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.modifier_pushButton.setFont(font)
        self.modifier_pushButton.setObjectName("modifier_pushButton")
        self.modifier_horizontalLayout.addWidget(self.modifier_pushButton)
        self.xml_verticalLayout.addLayout(self.modifier_horizontalLayout)
        self.verticalLayout.addLayout(self.xml_verticalLayout)
        self.modifier_pushButton.clicked.connect(self.onModifierClicked)

        self.modifier_pushButton.setVisible(False)
        self.nom_xml_label.setVisible(False)

        spacerItem = QtWidgets.QSpacerItem(2, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed) # Pour mettre un espace entre deux blocs
        self.verticalLayout.addItem(spacerItem)
        

        ###########################################
        ###########################################
        ##### Boite de lecture du fichier XML #####
        ###########################################
        ###########################################

        self.lecture_xml_groupBox = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lecture_xml_groupBox.sizePolicy().hasHeightForWidth())
        self.lecture_xml_groupBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.lecture_xml_groupBox.setFont(font)
        self.lecture_xml_groupBox.setObjectName("lecture_xml_groupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.lecture_xml_groupBox)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.lecture_xml_formLayout = QtWidgets.QFormLayout()
        self.lecture_xml_formLayout.setFieldGrowthPolicy(QtWidgets.QFormLayout.AllNonFixedFieldsGrow)
        self.lecture_xml_formLayout.setRowWrapPolicy(QtWidgets.QFormLayout.DontWrapRows)
        self.lecture_xml_formLayout.setLabelAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lecture_xml_formLayout.setSpacing(5)
        self.lecture_xml_formLayout.setObjectName("lecture_xml_formLayout")
        self.latitude_label = QtWidgets.QLabel(self.lecture_xml_groupBox)

        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.latitude_label.setFont(font)
        self.latitude_label.setObjectName("latitude_label")
        self.lecture_xml_formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.latitude_label)

        ################
        ### Latitude ###
        ################

        self.latitude_textEdit = QtWidgets.QTextEdit(self.lecture_xml_groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.latitude_textEdit.sizePolicy().hasHeightForWidth())
        self.latitude_textEdit.setSizePolicy(sizePolicy)
        self.latitude_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.latitude_textEdit.setFont(font)
        self.latitude_textEdit.setObjectName("latitude_textEdit")
        self.lecture_xml_formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.latitude_textEdit)
        
        #################
        ### Longitude ###
        #################

        self.longitude_textEdit = QtWidgets.QTextEdit(self.lecture_xml_groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.longitude_textEdit.sizePolicy().hasHeightForWidth())
        self.longitude_textEdit.setSizePolicy(sizePolicy)
        self.longitude_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.longitude_textEdit.setFont(font)
        self.longitude_textEdit.setObjectName("longitude_textEdit")
        self.lecture_xml_formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.longitude_textEdit)

        self.longitude_label = QtWidgets.QLabel(self.lecture_xml_groupBox)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.longitude_label.setFont(font)
        self.longitude_label.setObjectName("longitude_label")
        self.lecture_xml_formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.longitude_label)


        ################
        ### Altitude ###
        ################

        self.altitude_textEdit = QtWidgets.QTextEdit(self.lecture_xml_groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.altitude_textEdit.sizePolicy().hasHeightForWidth())
        self.altitude_textEdit.setSizePolicy(sizePolicy)
        self.altitude_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.altitude_textEdit.setFont(font)
        self.altitude_textEdit.setObjectName("altitude_textEdit")
        self.lecture_xml_formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.altitude_textEdit)

        self.altitude_label = QtWidgets.QLabel(self.lecture_xml_groupBox)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.altitude_label.setFont(font)
        self.altitude_label.setObjectName("altitude_label")
        self.lecture_xml_formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.altitude_label)



        ###############
        ### Vitesse ###
        ###############

        self.vitesse_label = QtWidgets.QLabel(self.lecture_xml_groupBox)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.vitesse_label.setFont(font)
        self.vitesse_label.setObjectName("vitesse_label")
        self.lecture_xml_formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.vitesse_label)

        self.vitesse_textEdit = QtWidgets.QTextEdit(self.lecture_xml_groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.vitesse_textEdit.sizePolicy().hasHeightForWidth())
        self.vitesse_textEdit.setSizePolicy(sizePolicy)
        self.vitesse_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.vitesse_textEdit.setFont(font)
        self.vitesse_textEdit.setObjectName("vitesse_textEdit")
        self.lecture_xml_formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.vitesse_textEdit)

        ###########
        ### Cap ###
        ###########

        self.cap_label = QtWidgets.QLabel(self.lecture_xml_groupBox)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.cap_label.setFont(font)
        self.cap_label.setObjectName("cap_label")
        self.lecture_xml_formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.cap_label)

        self.cap_textEdit = QtWidgets.QTextEdit(self.lecture_xml_groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cap_textEdit.sizePolicy().hasHeightForWidth())
        self.cap_textEdit.setSizePolicy(sizePolicy)
        self.cap_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.cap_textEdit.setFont(font)
        self.cap_textEdit.setObjectName("cap_textEdit")
        self.lecture_xml_formLayout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.cap_textEdit)

        ####################
        ### Pas de Temps ###
        ####################

        self.pas_de_temps_label = QtWidgets.QLabel(self.lecture_xml_groupBox)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.pas_de_temps_label.setFont(font)
        self.pas_de_temps_label.setObjectName("pas_de_temps_label")
        self.lecture_xml_formLayout.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.pas_de_temps_label)

        self.pas_de_temps_textEdit = QtWidgets.QTextEdit(self.lecture_xml_groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pas_de_temps_textEdit.sizePolicy().hasHeightForWidth())
        self.pas_de_temps_textEdit.setSizePolicy(sizePolicy)
        self.pas_de_temps_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.pas_de_temps_textEdit.setFont(font)
        self.pas_de_temps_textEdit.setObjectName("pas_de_temps_textEdit")
        self.lecture_xml_formLayout.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.pas_de_temps_textEdit)
        self.verticalLayout_2.addLayout(self.lecture_xml_formLayout)
        self.verticalLayout.addWidget(self.lecture_xml_groupBox)

        spacerItem1 = QtWidgets.QSpacerItem(2, 25, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed) # Pour mettre un espace entre deux blocs
        self.verticalLayout.addItem(spacerItem1)

        #############################################
        #############################################
        ##### Menu pour le profil de l'altitude #####
        #############################################
        #############################################

        self.profil_altitude_verticalLayout = QtWidgets.QVBoxLayout()
        self.profil_altitude_verticalLayout.setContentsMargins(-1, 0, -1, -1)
        self.profil_altitude_verticalLayout.setObjectName("profil_altitude_verticalLayout")
        self.profil_altitude_verticalLayout.setSpacing(5)

        ##################################################################
        ### Choix du profil d'altitude : constant/ascendant/descendant ###
        ##################################################################

        self.profil_altitude_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.profil_altitude_label.setFont(font)
        self.profil_altitude_label.setObjectName("profil_altitude_label")
        self.profil_altitude_verticalLayout.addWidget(self.profil_altitude_label)

        self.profil_altitude_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.profil_altitude_comboBox.setFont(font)
        self.profil_altitude_comboBox.setObjectName("profil_altitude_comboBox")
        self.profil_altitude_comboBox.addItem("")
        self.profil_altitude_comboBox.addItem("")
        self.profil_altitude_comboBox.addItem("")
        self.profil_altitude_verticalLayout.addWidget(self.profil_altitude_comboBox)

        self.profil_altitude_formLayout = QtWidgets.QFormLayout()
        self.profil_altitude_formLayout.setContentsMargins(-1, 0, -1, -1)
        self.profil_altitude_formLayout.setObjectName("profil_altitude_formLayout")

        ############################
        ### Vitesse si ascendant ###
        ############################

        self.vitesse_ascention_textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.vitesse_ascention_textEdit.sizePolicy().hasHeightForWidth())
        self.vitesse_ascention_textEdit.setSizePolicy(sizePolicy)
        self.vitesse_ascention_textEdit.setMinimumSize(QtCore.QSize(0, 0))
        self.vitesse_ascention_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.vitesse_ascention_textEdit.setFont(font)
        self.vitesse_ascention_textEdit.setObjectName("vitesse_ascention_textEdit")
        self.profil_altitude_formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.vitesse_ascention_textEdit)

        self.vitesse_ascention_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.vitesse_ascention_label.setFont(font)
        self.vitesse_ascention_label.setObjectName("vitesse_ascention_label")
        self.profil_altitude_formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.vitesse_ascention_label)

        #############################
        ### Vitesse si descendant ###
        #############################

        self.vitesse_descente_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.vitesse_descente_label.setFont(font)
        self.vitesse_descente_label.setObjectName("vitesse_descente_label")
        self.profil_altitude_formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.vitesse_descente_label)

        self.vitesse_descente_textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.vitesse_descente_textEdit.sizePolicy().hasHeightForWidth())
        self.vitesse_descente_textEdit.setSizePolicy(sizePolicy)
        self.vitesse_descente_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.vitesse_descente_textEdit.setFont(font)
        self.vitesse_descente_textEdit.setObjectName("vitesse_descente_textEdit")
        self.profil_altitude_formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.vitesse_descente_textEdit)
        self.profil_altitude_verticalLayout.addLayout(self.profil_altitude_formLayout)
        self.verticalLayout.addLayout(self.profil_altitude_verticalLayout)

        self.vitesse_ascention_label.setVisible(False)
        self.vitesse_ascention_textEdit.setVisible(False)
        self.vitesse_descente_label.setVisible(False)
        self.vitesse_descente_textEdit.setVisible(False)

        self.profil_altitude_comboBox.currentIndexChanged.connect(self.onProfilAltitudeSelection)

        spacerItem51 = QtWidgets.QSpacerItem(2, 25, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed) # Pour mettre un espace entre deux blocs
        self.verticalLayout.addItem(spacerItem51)

        ##########################################################
        ##########################################################
        ##### Menu déroulant pour le choix de la trajectoire #####
        ##########################################################
        ##########################################################

        self.choix_trajectoire_verticalLayout = QtWidgets.QVBoxLayout()
        self.choix_trajectoire_verticalLayout.setSpacing(5)
        self.choix_trajectoire_verticalLayout.setObjectName("choix_trajectoire_verticalLayout")

        self.choix_trajectoire_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.choix_trajectoire_label.setFont(font)
        self.choix_trajectoire_label.setObjectName("choix_trajectoire_label")
        self.choix_trajectoire_verticalLayout.addWidget(self.choix_trajectoire_label)

        self.choix_trajectoire_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents) # Menu déroulant pour le choix de la trajectoire
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.choix_trajectoire_comboBox.sizePolicy().hasHeightForWidth())
        self.choix_trajectoire_comboBox.setSizePolicy(sizePolicy)
        self.choix_trajectoire_comboBox.setMaximumSize(QtCore.QSize(200, 16777215))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.choix_trajectoire_comboBox.setFont(font)
        self.choix_trajectoire_comboBox.setObjectName("choix_trajectoire_comboBox")
        self.choix_trajectoire_comboBox.addItem("") # ...
        self.choix_trajectoire_comboBox.addItem("") # Rectiligne
        self.choix_trajectoire_comboBox.addItem("") # Circulaire
        self.choix_trajectoire_comboBox.addItem("") # ZigZag
        self.choix_trajectoire_comboBox.addItem("") # Zigzag aléatoire
        self.choix_trajectoire_comboBox.addItem("") # Hippodrome
        self.choix_trajectoire_comboBox.addItem("") # Trajectoire U
        self.choix_trajectoire_comboBox.addItem("") # Arc
        self.choix_trajectoire_verticalLayout.addWidget(self.choix_trajectoire_comboBox)
        self.verticalLayout.addLayout(self.choix_trajectoire_verticalLayout)

        self.choix_trajectoire_comboBox.currentIndexChanged.connect(self.onTrajectoireSelection) # Fait appel à la fonction onTrajectoireSelection pour interpréter les choix du menu déroulant

        spacerItem2 = QtWidgets.QSpacerItem(20, 25, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed) # Pour mettre un espace entre deux blocs

        self.verticalLayout.addItem(spacerItem2)

        ##############################################################
        ### Menu qui s'affiche si le choix 'Circulaire' a été fait ###
        ##############################################################

        self.IfCirculaire_verticalLayout = QtWidgets.QVBoxLayout()
        self.IfCirculaire_verticalLayout.setSpacing(5)
        self.IfCirculaire_verticalLayout.setObjectName("IfCirculaire_verticalLayout")
        self.IfCirculaire_formLayout = QtWidgets.QFormLayout()
        self.IfCirculaire_formLayout.setObjectName("IfCirculaire_formLayout")
        self.rayon_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.rayon_label.setFont(font)
        self.rayon_label.setObjectName("rayon_label")
        self.IfCirculaire_formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.rayon_label)

        self.rayon_textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rayon_textEdit.sizePolicy().hasHeightForWidth())
        self.rayon_textEdit.setSizePolicy(sizePolicy)
        self.rayon_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.rayon_textEdit.setFont(font)
        self.rayon_textEdit.setObjectName("rayon_textEdit")
        self.IfCirculaire_formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.rayon_textEdit)

        self.choix_direction_circulaire_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.choix_direction_circulaire_label.setFont(font)
        self.choix_direction_circulaire_label.setObjectName("choix_direction_circulaire_label")
        self.IfCirculaire_formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.choix_direction_circulaire_label)

        self.choix_direction_circulaire_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.choix_direction_circulaire_comboBox.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.choix_direction_circulaire_comboBox.setFont(font)
        self.choix_direction_circulaire_comboBox.setObjectName("choix_direction_circulaire_comboBox")
        self.choix_direction_circulaire_comboBox.addItem("")
        self.choix_direction_circulaire_comboBox.addItem("")
        self.IfCirculaire_formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.choix_direction_circulaire_comboBox)
        self.IfCirculaire_verticalLayout.addLayout(self.IfCirculaire_formLayout)
        self.verticalLayout.addLayout(self.IfCirculaire_verticalLayout)

        self.choix_direction_circulaire_comboBox.setVisible(False)
        self.choix_direction_circulaire_label.setVisible(False)
        self.rayon_label.setVisible(False)
        self.rayon_textEdit.setVisible(False)

        ########################################################
        ### Menu qui s'affiche si le choix ZigZag a été fait ###
        ########################################################

        
        self.IfZigzag_verticalLayout = QtWidgets.QVBoxLayout()
        self.IfZigzag_verticalLayout.setSpacing(5)
        self.IfZigzag_verticalLayout.setObjectName("IfZigzag_verticalLayout")
        self.choix_parametre_zigzag_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.choix_parametre_zigzag_label.setFont(font)
        self.choix_parametre_zigzag_label.setObjectName("choix_parametre_zigzag_label")
        self.IfZigzag_verticalLayout.addWidget(self.choix_parametre_zigzag_label)

        self.choix_parametre_zigzag_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.choix_parametre_zigzag_comboBox.setMaximumSize(QtCore.QSize(200, 16777215))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.choix_parametre_zigzag_comboBox.setFont(font)
        self.choix_parametre_zigzag_comboBox.setObjectName("choix_parametre_zigzag_comboBox")
        self.choix_parametre_zigzag_comboBox.addItem("")
        self.choix_parametre_zigzag_comboBox.addItem("")
        self.choix_parametre_zigzag_comboBox.addItem("")
        self.IfZigzag_verticalLayout.addWidget(self.choix_parametre_zigzag_comboBox)
        self.choix_parametre_zigzag_comboBox.currentIndexChanged.connect(self.onZigzagSelection)

        self.choix_type_zigzag_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.choix_type_zigzag_label.setFont(font)
        self.choix_type_zigzag_label.setObjectName("choix_type_zigzag_label")
        self.IfZigzag_verticalLayout.addWidget(self.choix_type_zigzag_label)

        self.choix_type_zigzag_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.choix_type_zigzag_comboBox.setMaximumSize(QtCore.QSize(200, 16777215))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.choix_type_zigzag_comboBox.setFont(font)
        self.choix_type_zigzag_comboBox.setObjectName("choix_type_zigzag_comboBox")
        self.choix_type_zigzag_comboBox.addItem("")
        self.choix_type_zigzag_comboBox.addItem("")
        self.IfZigzag_verticalLayout.addWidget(self.choix_type_zigzag_comboBox)
        self.choix_type_zigzag_comboBox.currentIndexChanged.connect(self.onZigzagSelection)
        self.IfZigzag_formLayout = QtWidgets.QFormLayout()
        self.IfZigzag_formLayout.setObjectName("IfZigzag_formLayout")

        self.nombre_ligne_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.nombre_ligne_label.setFont(font)
        self.nombre_ligne_label.setObjectName("nombre_ligne_label")
        self.IfZigzag_formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.nombre_ligne_label)

        self.nombre_ligne_textEdit_ = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.nombre_ligne_textEdit_.sizePolicy().hasHeightForWidth())
        self.nombre_ligne_textEdit_.setSizePolicy(sizePolicy)
        self.nombre_ligne_textEdit_.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.nombre_ligne_textEdit_.setFont(font)
        self.nombre_ligne_textEdit_.setObjectName("nombre_ligne_textEdit_")
        self.IfZigzag_formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.nombre_ligne_textEdit_)

        self.angle_zigzag_label_ = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.angle_zigzag_label_.setFont(font)
        self.angle_zigzag_label_.setObjectName("angle_zigzag_label_")
        self.IfZigzag_formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.angle_zigzag_label_)

        self.angle_zigzag_textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.angle_zigzag_textEdit.sizePolicy().hasHeightForWidth())
        self.angle_zigzag_textEdit.setSizePolicy(sizePolicy)
        self.angle_zigzag_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.angle_zigzag_textEdit.setFont(font)
        self.angle_zigzag_textEdit.setObjectName("angle_zigzag_textEdit")
        self.IfZigzag_formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.angle_zigzag_textEdit)

        self.choix_direction_zigzag_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.choix_direction_zigzag_label.setFont(font)
        self.choix_direction_zigzag_label.setObjectName("choix_direction_zigzag_label")
        self.IfZigzag_formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.choix_direction_zigzag_label)

        self.choix_direction_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.choix_direction_comboBox.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.choix_direction_comboBox.setFont(font)
        self.choix_direction_comboBox.setObjectName("choix_direction_comboBox")
        self.choix_direction_comboBox.addItem("")
        self.choix_direction_comboBox.addItem("")
        self.IfZigzag_formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.choix_direction_comboBox)

        self.longueur_ligne_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.longueur_ligne_label.setFont(font)
        self.longueur_ligne_label.setObjectName("longueur_ligne_label")
        self.IfZigzag_formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.longueur_ligne_label)

        self.longueur_ligne_textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.longueur_ligne_textEdit.sizePolicy().hasHeightForWidth())
        self.longueur_ligne_textEdit.setSizePolicy(sizePolicy)
        self.longueur_ligne_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.longueur_ligne_textEdit.setFont(font)
        self.longueur_ligne_textEdit.setObjectName("longueur_ligne_textEdit")
        self.IfZigzag_formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.longueur_ligne_textEdit)
        self.IfZigzag_verticalLayout.addLayout(self.IfZigzag_formLayout)
        self.verticalLayout.addLayout(self.IfZigzag_verticalLayout)


        self.choix_parametre_zigzag_comboBox.setVisible(False)
        self.choix_parametre_zigzag_label.setVisible(False)
        self.angle_zigzag_label_.setVisible(False)
        self.angle_zigzag_textEdit.setVisible(False)
        self.nombre_ligne_label.setVisible(False)
        self.nombre_ligne_textEdit_.setVisible(False)
        self.choix_direction_zigzag_label.setVisible(False)
        self.choix_direction_comboBox.setVisible(False)
        self.longueur_ligne_label.setVisible(False)
        self.longueur_ligne_textEdit.setVisible(False)
        self.choix_type_zigzag_comboBox.setVisible(False)
        self.choix_type_zigzag_label.setVisible(False)

        ########################################################################
        ### Menu qui s'affiche si le choix elliptique a été fait (à définir) ###
        ########################################################################

        self.IfElliptiqueverticalLayout = QtWidgets.QVBoxLayout()
        self.IfElliptiqueverticalLayout.setObjectName("IfElliptiqueverticalLayout")
        self.IfElliptiqueformLayout = QtWidgets.QFormLayout()
        self.IfElliptiqueformLayout.setObjectName("IfElliptiqueformLayout")

        self.elliptique1_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.elliptique1_label.setFont(font)
        self.elliptique1_label.setObjectName("elliptique1_label")
        self.IfElliptiqueformLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.elliptique1_label)

        self.elliptique1_textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.elliptique1_textEdit.sizePolicy().hasHeightForWidth())
        self.elliptique1_textEdit.setSizePolicy(sizePolicy)
        self.elliptique1_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.elliptique1_textEdit.setFont(font)
        self.elliptique1_textEdit.setObjectName("elliptique1_textEdit")
        self.IfElliptiqueformLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.elliptique1_textEdit)

        self.elliptique3_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.elliptique3_label.setFont(font)
        self.elliptique3_label.setObjectName("elliptique3_label")
        self.IfElliptiqueformLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.elliptique3_label)

        self.elliptique3_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.elliptique3_comboBox.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.elliptique3_comboBox.setFont(font)
        self.elliptique3_comboBox.setObjectName("elliptique3_comboBox")
        self.elliptique3_comboBox.addItem("")
        self.elliptique3_comboBox.addItem("")
        self.IfElliptiqueformLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.elliptique3_comboBox)

        self.elliptique2_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.elliptique2_label.setFont(font)
        self.elliptique2_label.setObjectName("elliptique2_label")
        self.IfElliptiqueformLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.elliptique2_label)

        self.elliptique2_textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.elliptique2_textEdit.sizePolicy().hasHeightForWidth())
        self.elliptique2_textEdit.setSizePolicy(sizePolicy)
        self.elliptique2_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.elliptique2_textEdit.setFont(font)
        self.elliptique2_textEdit.setObjectName("elliptique2_textEdit")
        self.IfElliptiqueformLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.elliptique2_textEdit)
        self.IfElliptiqueverticalLayout.addLayout(self.IfElliptiqueformLayout)
        self.verticalLayout.addLayout(self.IfElliptiqueverticalLayout)

        self.elliptique1_label.setVisible(False)
        self.elliptique1_textEdit.setVisible(False)
        self.elliptique2_label.setVisible(False)
        self.elliptique2_textEdit.setVisible(False)
        self.elliptique3_label.setVisible(False)
        self.elliptique3_comboBox.setVisible(False)

        #################################################################
        ### Menu qui s'affiche si hippodrome, arc ou U ont été choisi ###
        #################################################################

        self.arc_hippo_u_verticalLayout = QtWidgets.QVBoxLayout()
        self.arc_hippo_u_verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.arc_hippo_u_verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.arc_hippo_u_verticalLayout.setSpacing(0)
        self.arc_hippo_u_verticalLayout.setObjectName("arc_hippo_u_verticalLayout")

        self.arc_hippo_u_formLayout = QtWidgets.QFormLayout()
        self.arc_hippo_u_formLayout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.arc_hippo_u_formLayout.setContentsMargins(0, 0, 0, 0)
        self.arc_hippo_u_formLayout.setSpacing(5)
        self.arc_hippo_u_formLayout.setObjectName("arc_hippo_u_formLayout")

        self.rayon_courbure_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.rayon_courbure_label.setFont(font)
        self.rayon_courbure_label.setObjectName("rayon_courbure_label")
        self.arc_hippo_u_formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.rayon_courbure_label)

        self.angle_rotation_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.angle_rotation_label.setFont(font)
        self.angle_rotation_label.setObjectName("angle_rotation_label")
        self.arc_hippo_u_formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.angle_rotation_label)

        self.virage_arc_hippo_u_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.virage_arc_hippo_u_label.setFont(font)
        self.virage_arc_hippo_u_label.setObjectName("virage_arc_hippo_u_label")
        self.arc_hippo_u_formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.virage_arc_hippo_u_label)

        self.rayon_courbure_textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rayon_courbure_textEdit.sizePolicy().hasHeightForWidth())
        self.rayon_courbure_textEdit.setSizePolicy(sizePolicy)
        self.rayon_courbure_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        self.rayon_courbure_textEdit.setObjectName("rayon_courbure_textEdit")
        self.arc_hippo_u_formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.rayon_courbure_textEdit)

        self.angle_rotation_textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.angle_rotation_textEdit.sizePolicy().hasHeightForWidth())
        self.angle_rotation_textEdit.setSizePolicy(sizePolicy)
        self.angle_rotation_textEdit.setMaximumSize(QtCore.QSize(100, 26))
        self.angle_rotation_textEdit.setObjectName("angle_rotation_textEdit")
        self.arc_hippo_u_formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.angle_rotation_textEdit)

        self.virage_arc_hippo_u_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.virage_arc_hippo_u_comboBox.sizePolicy().hasHeightForWidth())
        self.virage_arc_hippo_u_comboBox.setSizePolicy(sizePolicy)
        self.virage_arc_hippo_u_comboBox.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.virage_arc_hippo_u_comboBox.setFont(font)
        self.virage_arc_hippo_u_comboBox.setObjectName("virage_arc_hippo_u_comboBox")
        self.virage_arc_hippo_u_comboBox.addItem("")
        self.virage_arc_hippo_u_comboBox.addItem("")
        self.arc_hippo_u_formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.virage_arc_hippo_u_comboBox)
        self.arc_hippo_u_verticalLayout.addLayout(self.arc_hippo_u_formLayout)
        self.verticalLayout.addLayout(self.arc_hippo_u_verticalLayout)

        self.virage_arc_hippo_u_comboBox.setVisible(False)
        self.virage_arc_hippo_u_label.setVisible(False)
        self.rayon_courbure_textEdit.setVisible(False)
        self.rayon_courbure_label.setVisible(False)
        self.angle_rotation_textEdit.setVisible(False)
        self.angle_rotation_label.setVisible(False)

        spacerItem3 = QtWidgets.QSpacerItem(20, 25, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed) # Pour mettre un espace entre deux blocs
        self.verticalLayout.addItem(spacerItem3)

        #############################################
        #############################################
        ##### Definition du temps d'acquisition #####
        #############################################
        #############################################
        
        self.duree_acquisition_verticalLayout = QtWidgets.QVBoxLayout()
        self.duree_acquisition_verticalLayout.setSpacing(5)
        self.duree_acquisition_verticalLayout.setObjectName("duree_acquisition_verticalLayout")
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.duree_acquisition_label_ = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.duree_acquisition_label_.setFont(font)
        self.duree_acquisition_label_.setObjectName("duree_acquisition_label_")
        self.gridLayout_3.addWidget(self.duree_acquisition_label_, 0, 0, 1, 1)

        self.duree_acquisition_textEdit_ = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.duree_acquisition_textEdit_.sizePolicy().hasHeightForWidth())
        self.duree_acquisition_textEdit_.setSizePolicy(sizePolicy)
        self.duree_acquisition_textEdit_.setMaximumSize(QtCore.QSize(100, 26))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.duree_acquisition_textEdit_.setFont(font)
        self.duree_acquisition_textEdit_.setObjectName("duree_acquisition_textEdit_")
        self.gridLayout_3.addWidget(self.duree_acquisition_textEdit_, 0, 1, 1, 1)

        self.s_min_h_comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.s_min_h_comboBox.sizePolicy().hasHeightForWidth())
        self.s_min_h_comboBox.setSizePolicy(sizePolicy)
        self.s_min_h_comboBox.setMaximumSize(QtCore.QSize(45, 16777215))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.s_min_h_comboBox.setFont(font)
        self.s_min_h_comboBox.setObjectName("s_min_h_comboBox")
        self.s_min_h_comboBox.addItem("")
        self.s_min_h_comboBox.addItem("")
        self.s_min_h_comboBox.addItem("")
        self.gridLayout_3.addWidget(self.s_min_h_comboBox, 0, 2, 1, 1)
        self.duree_acquisition_verticalLayout.addLayout(self.gridLayout_3)
        self.verticalLayout.addLayout(self.duree_acquisition_verticalLayout)

        spacerItem41 = QtWidgets.QSpacerItem(20, 25, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem41)

        #############################################################
        #############################################################
        ##### CheckBox pour choisir le type de carte à afficher #####
        #############################################################
        #############################################################

        self.type_carte_verticalLayout = QtWidgets.QVBoxLayout()
        self.type_carte_verticalLayout.setContentsMargins(-1, 0, -1, -1)
        self.type_carte_verticalLayout.setObjectName("type_carte_verticalLayout")
        self.type_carte_groupBox = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.type_carte_groupBox.setFont(font)
        self.type_carte_groupBox.setObjectName("type_carte_groupBox")

        self.type_carte_verticalLayout_2 = QtWidgets.QVBoxLayout(self.type_carte_groupBox)
        self.type_carte_verticalLayout_2.setObjectName("type_carte_verticalLayout_2")

        self.trajectoire_checkBox = QtWidgets.QCheckBox(self.type_carte_groupBox)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.trajectoire_checkBox.setFont(font)
        self.trajectoire_checkBox.setObjectName("trajectoire_checkBox")
        self.type_carte_verticalLayout_2.addWidget(self.trajectoire_checkBox)

        self.points_checkBox = QtWidgets.QCheckBox(self.type_carte_groupBox)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.points_checkBox.setFont(font)
        self.points_checkBox.setObjectName("points_checkBox")
        self.type_carte_verticalLayout_2.addWidget(self.points_checkBox)

        self.points_checkBox.setVisible(False) # checkbox correspondant à la page 2, invisible car non utilisé 

        self.affichage_3d_checkBox = QtWidgets.QCheckBox(self.type_carte_groupBox)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.affichage_3d_checkBox.setFont(font)
        self.affichage_3d_checkBox.setObjectName("affichage_3d_checkbox")
        self.type_carte_verticalLayout_2.addWidget(self.affichage_3d_checkBox)

        self.trajectoire_temps_reel_checkBox = QtWidgets.QCheckBox(self.type_carte_groupBox)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.trajectoire_temps_reel_checkBox.setFont(font)
        self.trajectoire_temps_reel_checkBox.setObjectName("trajectoire_temps_reel_checkBox")
        self.type_carte_verticalLayout_2.addWidget(self.trajectoire_temps_reel_checkBox)
        self.type_carte_verticalLayout.addWidget(self.type_carte_groupBox)
        self.verticalLayout.addLayout(self.type_carte_verticalLayout)

        self.trajectoire_temps_reel_checkBox.setVisible(True) # checkbox correspondant à la page 5, invisible car non utilisé 

        spacerItem4 = QtWidgets.QSpacerItem(50, 50, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding) # Espace qui fait que les boutons générer et ASCII sont toujours en bas
        self.verticalLayout.addItem(spacerItem4)

        ####################################
        ### Bouton pour générer la carte ###
        ####################################

        self.generer_pushButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.generer_pushButton.setFont(font)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(os.path.dirname(__file__), 'Logos/map.svg'))), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.generer_pushButton.setIcon(icon1)
        self.generer_pushButton.setObjectName("generer_pushButton")
        self.verticalLayout.addWidget(self.generer_pushButton)
        self.generer_pushButton.clicked.connect(self.onGenererCarteClicked)

        ################################################
        ### Bouton pour télécharger le fichier ASCII ###
        ################################################

        self.telecharger_resultats_pushButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.telecharger_resultats_pushButton.setFont(font)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(os.path.dirname(__file__), 'Logos/download.svg'))), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.telecharger_resultats_pushButton.setIcon(icon2)
        self.telecharger_resultats_pushButton.setObjectName("telecharger_resultats_pushButton")
        self.verticalLayout.addWidget(self.telecharger_resultats_pushButton)
        #self.telecharger_resultats_pushButton.clicked.connect(self.onTelechargeClique) la fonction onTelechargeClique ne fonctionne pas
        self.telecharger_resultats_pushButton.clicked.connect(self.erreurTelecharge) # Message d'erreur pour indiquer que le bouton est inutile pour le moment
        

        ####################
        ### Logo SeaTech ###
        ####################

        self.Seatech_logo = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.Seatech_logo.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(os.path.dirname(__file__),'Logos/SeaTechLogo.png'))), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Seatech_logo.setIcon(icon4)
        self.Seatech_logo.setIconSize(QtCore.QSize(100, 30))
        self.Seatech_logo.setFlat(True)
        self.Seatech_logo.setObjectName("Seatech_logo")
        self.verticalLayout.addWidget(self.Seatech_logo)

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.horizontalLayout.addWidget(self.scrollArea)

        spacerItem5 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum) # Pour mettre un espace entre deux blocs
        self.horizontalLayout.addItem(spacerItem5)

        ########################################################
        ########################################################
        ##### Definition de la partie contenant les cartes #####
        ########################################################
        ########################################################

        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.tabWidget.setFont(font)
        self.tabWidget.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.tabWidget.setObjectName("tabWidget")

        #########################################################
        ### Page 1 contenant la carte vide, toujours affichée ###
        #########################################################

        self.page1 = QtWidgets.QWidget()
        self.page1.setObjectName("page1")

        self.horizontalLayout_tab11 = QtWidgets.QHBoxLayout(self.page1)
        self.horizontalLayout_tab11.setObjectName("horizontalLayout_tab11")

        self.carte_trajectoire_widget = QtWidgets.QWidget(self.page1)
        self.carte_trajectoire_widget.setObjectName("carte_trajectoire_widget")

        self.horizontalLayout_tab12 = QtWidgets.QHBoxLayout(self.carte_trajectoire_widget)
        self.horizontalLayout_tab12.setObjectName("horizontalLayout_tab12")

        self.carte_trajectoire_webEngineView = QtWebEngineWidgets.QWebEngineView(self.carte_trajectoire_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.carte_trajectoire_webEngineView.sizePolicy().hasHeightForWidth())
        self.carte_trajectoire_webEngineView.setSizePolicy(sizePolicy)
        self.carte_trajectoire_webEngineView.setMinimumSize(QtCore.QSize(0, 0))
        self.carte_trajectoire_webEngineView.setProperty("url", QtCore.QUrl("about:blank"))
        self.carte_trajectoire_webEngineView.setObjectName("carte_trajectoire_webEngineView")
        self.horizontalLayout_tab12.addWidget(self.carte_trajectoire_webEngineView)
        self.horizontalLayout_tab11.addWidget(self.carte_trajectoire_widget)
        self.tabWidget.addTab(self.page1, "")

        # Affichage de la carte de base quand on ouvre le logiciel

        self.base_map_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "carte.html"))
        self.carte_trajectoire_webEngineView.load(QtCore.QUrl.fromLocalFile(self.base_map_path))

        #################################################################################################
        ### Page 2, affichée si carte avec points a été sélectionné. Elle est codée mais non utilisée ###
        #################################################################################################

        self.page2 = QtWidgets.QWidget()
        self.page2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.page2.setObjectName("page2")

        self.horizontalLayout_tab21 = QtWidgets.QHBoxLayout(self.page2)
        self.horizontalLayout_tab21.setObjectName("horizontalLayout_tab21")

        self.carte_points_widget = QtWidgets.QWidget(self.page2)
        self.carte_points_widget.setObjectName("carte_points_widget")

        self.horizontalLayout_tab22 = QtWidgets.QHBoxLayout(self.carte_points_widget)
        self.horizontalLayout_tab22.setObjectName("horizontalLayout_tab22")

        self.carte_points_webEngineView = QtWebEngineWidgets.QWebEngineView(self.carte_points_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.carte_points_webEngineView.sizePolicy().hasHeightForWidth())
        self.carte_points_webEngineView.setSizePolicy(sizePolicy)
        self.carte_points_webEngineView.setMinimumSize(QtCore.QSize(0, 0))
        self.carte_points_webEngineView.setProperty("url", QtCore.QUrl("about:blank"))
        self.carte_points_webEngineView.setObjectName("carte_points_webEngineView")
        self.horizontalLayout_tab22.addWidget(self.carte_points_webEngineView)
        self.horizontalLayout_tab21.addWidget(self.carte_points_widget)
        self.tabWidget.addTab(self.page2, "")

        #############################################################
        ### Page 3, affichée si l'option affichage 3D a été coché ###
        #############################################################

        self.page3 = QtWidgets.QWidget()
        self.page3.setObjectName("page3")

        self.horizontalLayout_tab31 = QtWidgets.QHBoxLayout(self.page3)
        self.horizontalLayout_tab31.setObjectName("horizontalLayout_31")

        self.affichage_3d_widget = QtWidgets.QWidget(self.page3)
        self.affichage_3d_widget.setObjectName("affichage_3d_widget")

        self.horizontalLayout_tab32 = QtWidgets.QHBoxLayout(self.affichage_3d_widget)
        self.horizontalLayout_tab32.setObjectName("horizontalLayout_32")

        self.graph_widget = GraphWidget()
        self.horizontalLayout_tab32.addWidget(self.graph_widget)
        self.horizontalLayout_tab31.addWidget(self.affichage_3d_widget)
        self.tabWidget.addTab(self.page3, "")

        #########################################################################################
        ### Page 4, affichée si carte en temps réel a été sélectionné. Codéé mais non utilisé ###
        #########################################################################################

        self.page4 = QtWidgets.QWidget()
        self.page4.setObjectName("page4")

        self.horizontalLayout_tab41 = QtWidgets.QHBoxLayout(self.page4)
        self.horizontalLayout_tab41.setObjectName("horizontalLayout_41")

        self.carte_temps_reel_widget = QtWidgets.QWidget(self.page4)
        self.carte_temps_reel_widget.setObjectName("carte_temps_reel_widget")

        self.horizontalLayout_tab42 = QtWidgets.QHBoxLayout(self.carte_temps_reel_widget)
        self.horizontalLayout_tab42.setObjectName("horizontalLayout_42")

        self.carte_temps_reel_webEngineView = QtWebEngineWidgets.QWebEngineView(self.carte_temps_reel_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.carte_temps_reel_webEngineView.sizePolicy().hasHeightForWidth())
        self.carte_temps_reel_webEngineView.setSizePolicy(sizePolicy)
        self.carte_temps_reel_webEngineView.setMinimumSize(QtCore.QSize(0, 0))
        self.carte_temps_reel_webEngineView.setProperty("url", QtCore.QUrl("about:blank"))
        self.carte_temps_reel_webEngineView.setObjectName("carte_temps_reel_webEngineView")
        self.horizontalLayout_tab42.addWidget(self.carte_temps_reel_webEngineView)
        self.horizontalLayout_tab41.addWidget(self.carte_temps_reel_widget)
        self.tabWidget.addTab(self.page4, "")

        ###################################################################################################
        ### Page 5, affichée lorsque le bouton modifier a été cliqué. Permet de modifier le fichier XML ###
        ###################################################################################################

        self.page5 = QtWidgets.QWidget()
        self.page5.setObjectName("Page5")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.page5)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.modifier_xml_textEdit = QtWidgets.QTextEdit(self.page5)
        self.modifier_xml_textEdit.setObjectName("modifier_xml_textEdit")
        self.verticalLayout_3.addWidget(self.modifier_xml_textEdit)
        self.enregistrer_xml_pushButton = QtWidgets.QPushButton(self.page5)
        self.enregistrer_xml_pushButton.setObjectName("enregistrer_xml_pushButton")
        self.verticalLayout_3.addWidget(self.enregistrer_xml_pushButton)

        self.enregistrer_xml_pushButton.clicked.connect(self.onEnregistrerClicked)

        self.tabWidget.addTab(self.page5, "")
        
        self.horizontalLayout.addWidget(self.tabWidget)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)

        # Pages 2, 3 et 4 désactivées de base

        self.tabWidget.setTabVisible(1,False)
        self.tabWidget.setTabVisible(2,False)
        self.tabWidget.setTabVisible(3,False)
        self.tabWidget.setTabVisible(4,False)


        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1101, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        

    def onProfilAltitudeSelection(self):
        if self.profil_altitude_comboBox.currentText() == 'Ascendant':
            self.vitesse_ascention_label.setVisible(True)
            self.vitesse_ascention_textEdit.setVisible(True)
            self.vitesse_descente_label.setVisible(False)
            self.vitesse_descente_textEdit.setVisible(False)
        elif self.profil_altitude_comboBox.currentText() == 'Descendant':
            self.vitesse_ascention_label.setVisible(False)
            self.vitesse_ascention_textEdit.setVisible(False)
            self.vitesse_descente_label.setVisible(True)
            self.vitesse_descente_textEdit.setVisible(True)
        else :
            self.vitesse_ascention_label.setVisible(False)
            self.vitesse_ascention_textEdit.setVisible(False)
            self.vitesse_descente_label.setVisible(False)
            self.vitesse_descente_textEdit.setVisible(False)
            

    def ouvrirFichierXML(self):
        """
        Fonction qui lit le fichier XML, voici les étapes :
            1) Ouverture d'une fenêtre de dialogue permettant à l'utilisateur de choisir un fichier au format.xml lorsque le bouton parcourir est appuyé
            2) Lecture du fichier et récupération des paramètres initiaux à l'aide de la fonction read_xml
        """
        file_dialog = QtWidgets.QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(None, "Sélectionner un fichier XML", "", "Fichiers XML (*.xml)")
        self.file_path = file_path
        if file_path:
            file_name = os.path.basename(file_path)
            latitude, longitude, altitude, vitesse, cap, pas_de_temps = read_xml(file_path)
            self.latitude_textEdit.setPlainText(latitude)
            self.longitude_textEdit.setPlainText(longitude)
            self.altitude_textEdit.setPlainText(altitude)
            self.vitesse_textEdit.setPlainText(vitesse)
            self.cap_textEdit.setPlainText(cap)
            self.pas_de_temps_textEdit.setPlainText(pas_de_temps)
            
            self.nom_xml_label.setText("Fichier sélectionné : " + file_name)
            self.nom_xml_label.setVisible(True)
            self.modifier_pushButton.setVisible(True)

    
    def onModifierClicked(self):
        """
        Fonction appelée lorsque le bouton "Modifier" est cliqué.
        Ouvre le fichier texte sélectionné et permet à l'utilisateur de le modifier.
        """
        file_path = self.file_path 
        if file_path:
            with open(file_path, 'r') as file:
                content = file.read()

            # Afficher le contenu du fichier dans une zone de texte modifiable
            self.modifier_xml_textEdit.setText(content)

            # Activer la zone de texte modifiable
            self.modifier_xml_textEdit.setReadOnly(False)

            self.tabWidget.setTabVisible(4,True)
            self.tabWidget.setCurrentIndex(4)
            

    def onEnregistrerClicked(self):
        """
        Fonction appelée lorsque le bouton "Enregistrer" est cliqué.
        Enregistre les modifications apportées au fichier.
        """
        if self.file_path:
            content = self.modifier_xml_textEdit.toPlainText()

            with open(self.file_path, 'w') as file:
                file.write(content)

            self.tabWidget.setTabVisible(4,False)
            self.tabWidget.setCurrentIndex(0)
            latitude, longitude, altitude, vitesse, cap, pas_de_temps = read_xml(self.file_path)
            self.latitude_textEdit.setPlainText(latitude)
            self.longitude_textEdit.setPlainText(longitude)
            self.altitude_textEdit.setPlainText(altitude)
            self.vitesse_textEdit.setPlainText(vitesse)
            self.cap_textEdit.setPlainText(cap)
            self.pas_de_temps_textEdit.setPlainText(pas_de_temps)


    def onZigzagSelection(self):
        """
        Fonction qui permet d'afficher les sous-menus de Zigzag lorsque la trajectoire Zigzag est choisie
        """
        if self.choix_parametre_zigzag_comboBox.currentText() == '...':
            self.angle_zigzag_label_.setVisible(False)
            self.angle_zigzag_textEdit.setVisible(False)
            self.nombre_ligne_label.setVisible(False)
            self.nombre_ligne_textEdit_.setVisible(False)
            self.choix_direction_zigzag_label.setVisible(False)
            self.choix_direction_comboBox.setVisible(False)
            self.longueur_ligne_label.setVisible(False)
            self.longueur_ligne_textEdit.setVisible(False)

        elif self.choix_parametre_zigzag_comboBox.currentText() == 'Nombre de lignes fixe' and self.choix_type_zigzag_comboBox.currentText() == 'Zigzag constant':
            self.angle_zigzag_label_.setVisible(True)
            self.angle_zigzag_textEdit.setVisible(True)
            self.nombre_ligne_label.setVisible(True)
            self.nombre_ligne_textEdit_.setVisible(True)
            self.choix_direction_zigzag_label.setVisible(True)
            self.choix_direction_comboBox.setVisible(True)
            self.longueur_ligne_label.setVisible(False)
            self.longueur_ligne_textEdit.setVisible(False)

        elif self.choix_parametre_zigzag_comboBox.currentText() == 'Nombre de lignes fixe' and self.choix_type_zigzag_comboBox.currentText() == 'Zigzag angle aléatoire':
            self.angle_zigzag_label_.setVisible(False)
            self.angle_zigzag_textEdit.setVisible(False)
            self.nombre_ligne_label.setVisible(True)
            self.nombre_ligne_textEdit_.setVisible(True)
            self.choix_direction_zigzag_label.setVisible(True)
            self.choix_direction_comboBox.setVisible(True)
            self.longueur_ligne_label.setVisible(False)
            self.longueur_ligne_textEdit.setVisible(False)

        elif self.choix_parametre_zigzag_comboBox.currentText() == 'Longueur de la ligne fixe' and self.choix_type_zigzag_comboBox.currentText() == 'Zigzag angle aléatoire':
            self.angle_zigzag_label_.setVisible(False)
            self.angle_zigzag_textEdit.setVisible(False)
            self.nombre_ligne_label.setVisible(False)
            self.nombre_ligne_textEdit_.setVisible(False)
            self.choix_direction_zigzag_label.setVisible(True)
            self.choix_direction_comboBox.setVisible(True)
            self.longueur_ligne_label.setVisible(True)
            self.longueur_ligne_textEdit.setVisible(True)
        
        else :
            self.angle_zigzag_label_.setVisible(True)
            self.angle_zigzag_textEdit.setVisible(True)
            self.nombre_ligne_label.setVisible(False)
            self.nombre_ligne_textEdit_.setVisible(False)
            self.choix_direction_zigzag_label.setVisible(True)
            self.choix_direction_comboBox.setVisible(True)
            self.longueur_ligne_label.setVisible(True)
            self.longueur_ligne_textEdit.setVisible(True)



    def onTrajectoireSelection(self, index):
        """
        Fonction permet d'afficher chaque sous-menu en fonction de la trajectoire qui est sélectionnée
        """
        self.trajectoire_selectionnee = self.choix_trajectoire_comboBox.currentText()
        if self.trajectoire_selectionnee == 'Circulaire': 
            self.rayon_label.setVisible(True)
            self.rayon_textEdit.setVisible(True)
            self.choix_direction_circulaire_label.setVisible(True)
            self.choix_direction_circulaire_comboBox.setVisible(True)

            self.choix_parametre_zigzag_comboBox.setVisible(False)
            self.choix_parametre_zigzag_label.setVisible(False)
            self.angle_zigzag_label_.setVisible(False)
            self.angle_zigzag_textEdit.setVisible(False)
            self.nombre_ligne_label.setVisible(False)
            self.nombre_ligne_textEdit_.setVisible(False)
            self.choix_direction_zigzag_label.setVisible(False)
            self.choix_direction_comboBox.setVisible(False)
            self.longueur_ligne_label.setVisible(False)
            self.longueur_ligne_textEdit.setVisible(False)
            self.choix_type_zigzag_comboBox.setVisible(False)
            self.choix_type_zigzag_label.setVisible(False)

            self.elliptique1_label.setVisible(False)
            self.elliptique1_textEdit.setVisible(False)
            self.elliptique2_label.setVisible(False)
            self.elliptique2_textEdit.setVisible(False)
            self.elliptique3_label.setVisible(False)
            self.elliptique3_comboBox.setVisible(False)

            self.virage_arc_hippo_u_comboBox.setVisible(False)
            self.virage_arc_hippo_u_label.setVisible(False)
            self.rayon_courbure_textEdit.setVisible(False)
            self.rayon_courbure_label.setVisible(False)
            self.angle_rotation_textEdit.setVisible(False)
            self.angle_rotation_label.setVisible(False)

        elif self.trajectoire_selectionnee == 'Hippodrome':
            self.rayon_label.setVisible(False)
            self.rayon_textEdit.setVisible(False)
            self.choix_direction_circulaire_label.setVisible(False)
            self.choix_direction_circulaire_comboBox.setVisible(False)

            self.choix_parametre_zigzag_comboBox.setVisible(False)
            self.choix_parametre_zigzag_label.setVisible(False)
            self.angle_zigzag_label_.setVisible(False)
            self.angle_zigzag_textEdit.setVisible(False)
            self.nombre_ligne_label.setVisible(False)
            self.nombre_ligne_textEdit_.setVisible(False)
            self.choix_direction_zigzag_label.setVisible(False)
            self.choix_direction_comboBox.setVisible(False)
            self.longueur_ligne_label.setVisible(False)
            self.longueur_ligne_textEdit.setVisible(False)
            self.choix_type_zigzag_comboBox.setVisible(False)
            self.choix_type_zigzag_label.setVisible(False)

            self.elliptique1_label.setVisible(False)
            self.elliptique1_textEdit.setVisible(False)
            self.elliptique2_label.setVisible(False)
            self.elliptique2_textEdit.setVisible(False)
            self.elliptique3_label.setVisible(False)
            self.elliptique3_comboBox.setVisible(False)

            self.virage_arc_hippo_u_comboBox.setVisible(True)
            self.virage_arc_hippo_u_label.setVisible(True)
            self.rayon_courbure_textEdit.setVisible(True)
            self.rayon_courbure_label.setVisible(True)
            self.angle_rotation_textEdit.setVisible(False)
            self.angle_rotation_label.setVisible(False)

        elif self.trajectoire_selectionnee == 'Zigzag':
            self.rayon_label.setVisible(False)
            self.rayon_textEdit.setVisible(False)
            self.choix_direction_circulaire_label.setVisible(False)
            self.choix_direction_circulaire_comboBox.setVisible(False)

            self.choix_parametre_zigzag_comboBox.setVisible(True)
            self.choix_parametre_zigzag_label.setVisible(True)
            self.choix_type_zigzag_comboBox.setVisible(True)
            self.choix_type_zigzag_label.setVisible(True)

            self.angle_zigzag_label_.setVisible(False)
            self.angle_zigzag_textEdit.setVisible(False)
            self.nombre_ligne_label.setVisible(False)
            self.nombre_ligne_textEdit_.setVisible(False)
            self.choix_direction_zigzag_label.setVisible(False)
            self.choix_direction_comboBox.setVisible(False)
            self.longueur_ligne_label.setVisible(False)
            self.longueur_ligne_textEdit.setVisible(False)

            self.elliptique1_label.setVisible(False)
            self.elliptique1_textEdit.setVisible(False)
            self.elliptique2_label.setVisible(False)
            self.elliptique2_textEdit.setVisible(False)
            self.elliptique3_label.setVisible(False)
            self.elliptique3_comboBox.setVisible(False)

            self.virage_arc_hippo_u_comboBox.setVisible(False)
            self.virage_arc_hippo_u_label.setVisible(False)
            self.rayon_courbure_textEdit.setVisible(False)
            self.rayon_courbure_label.setVisible(False)
            self.angle_rotation_textEdit.setVisible(False)
            self.angle_rotation_label.setVisible(False)

        elif self.trajectoire_selectionnee == 'Rectiligne' or self.trajectoire_selectionnee == '...':
            self.rayon_label.setVisible(False)
            self.rayon_textEdit.setVisible(False)
            self.choix_direction_circulaire_label.setVisible(False)
            self.choix_direction_circulaire_comboBox.setVisible(False)

            self.choix_parametre_zigzag_comboBox.setVisible(False)
            self.choix_parametre_zigzag_label.setVisible(False)
            self.angle_zigzag_label_.setVisible(False)
            self.angle_zigzag_textEdit.setVisible(False)
            self.nombre_ligne_label.setVisible(False)
            self.nombre_ligne_textEdit_.setVisible(False)
            self.choix_direction_zigzag_label.setVisible(False)
            self.choix_direction_comboBox.setVisible(False)
            self.longueur_ligne_label.setVisible(False)
            self.longueur_ligne_textEdit.setVisible(False)
            self.choix_type_zigzag_comboBox.setVisible(False)
            self.choix_type_zigzag_label.setVisible(False)

            self.elliptique1_label.setVisible(False)
            self.elliptique1_textEdit.setVisible(False)
            self.elliptique2_label.setVisible(False)
            self.elliptique2_textEdit.setVisible(False)
            self.elliptique3_label.setVisible(False)
            self.elliptique3_comboBox.setVisible(False)

            self.virage_arc_hippo_u_comboBox.setVisible(False)
            self.virage_arc_hippo_u_label.setVisible(False)
            self.rayon_courbure_textEdit.setVisible(False)
            self.rayon_courbure_label.setVisible(False)
            self.angle_rotation_textEdit.setVisible(False)
            self.angle_rotation_label.setVisible(False)

        elif self.trajectoire_selectionnee == 'Trajectoire U' or self.trajectoire_selectionnee == 'Arc':
            self.rayon_label.setVisible(False)
            self.rayon_textEdit.setVisible(False)
            self.choix_direction_circulaire_label.setVisible(False)
            self.choix_direction_circulaire_comboBox.setVisible(False)

            self.choix_parametre_zigzag_comboBox.setVisible(False)
            self.choix_parametre_zigzag_label.setVisible(False)
            self.angle_zigzag_label_.setVisible(False)
            self.angle_zigzag_textEdit.setVisible(False)
            self.nombre_ligne_label.setVisible(False)
            self.nombre_ligne_textEdit_.setVisible(False)
            self.choix_direction_zigzag_label.setVisible(False)
            self.choix_direction_comboBox.setVisible(False)
            self.longueur_ligne_label.setVisible(False)
            self.longueur_ligne_textEdit.setVisible(False)
            self.choix_type_zigzag_comboBox.setVisible(False)
            self.choix_type_zigzag_label.setVisible(False)

            self.elliptique1_label.setVisible(False)
            self.elliptique1_textEdit.setVisible(False)
            self.elliptique2_label.setVisible(False)
            self.elliptique2_textEdit.setVisible(False)
            self.elliptique3_label.setVisible(False)
            self.elliptique3_comboBox.setVisible(False)

            self.virage_arc_hippo_u_comboBox.setVisible(True)
            self.virage_arc_hippo_u_label.setVisible(True)
            self.rayon_courbure_textEdit.setVisible(True)
            self.rayon_courbure_label.setVisible(True)
            self.angle_rotation_textEdit.setVisible(True)
            self.angle_rotation_label.setVisible(True)

    def actualiserGraphique(self):
        # Mettre à jour le graphique avec les nouvelles données
        graph_widget = self.centralwidget.findChild(GraphWidget)
        graph_widget.actualiserCoordonnees(self.X_3d, self.Y_3d, self.Z_3d)




    def onGenererCarteClicked(self):
        """
        Fonction qui se lance lorsque le bouton généré est cliqué.
        Voici les différentes étapes de la fonction :
            1) Vérification que les entrées de base sont renseignées et au bon format
            2) Récupération et conversion si besoin de l'unité du temps
            3) Récupération du type de trajectoire
            4) Pour chaque type de trajectoire :
                a) Si il y a des entrées suplémentaires : lecture et vérification du format
                b) Génération de la liste des positions (Latitudes,Longitudes,Z), du temps et du cap
            5) Gestion du paramètre d'altitude
                a) Si non constant : lecture et vérification des entrées
                b) Calcul de la liste des positions d'altitude
            6) On regarde si il y a des générations de cartes cochées :
                a) Si oui :
                    a1) Affichage de l'onglet
                    a2) Génération de la carte
                    a3) Affichage de la carte
                b) Si non :
                    b1) Désaffichage de l'onglet si il était affiché précédemment
                    b2) Une carte vierge est affichée si aucune carte n'a été sélectionnée

            7) Création du fichier de résultat

        Note : 

        Les cartes sont au format : "Carte + Type carte + Type trajectoire + Numéro essai (nombre de fois que l'utilisateur a cliqué sur générer)"
                exemple : CarteTrajectoireRectiligne1.htlm
        Le fichier contenant le résultat est au format : "Resultat + Type trajectoire + Numéro essai (nombre de fois que l'utilisateur a cliqué sur générer)"
                exemple : ResultatRectiligne1.txt
        
        """
        ###############
        ### Etape 1 ###
        ###############

        temps_acquisition = self.duree_acquisition_textEdit_.toPlainText()
        latitude = self.latitude_textEdit.toPlainText()
        longitude = self.longitude_textEdit.toPlainText()
        altitude = self.altitude_textEdit.toPlainText()
        vitesse = self.vitesse_textEdit.toPlainText()
        cap = self.cap_textEdit.toPlainText()
        pas_de_temps = self.pas_de_temps_textEdit.toPlainText()
        self.nombre_generation += 1
        try:
            # On check si toutes les valeurs rentrées sont bien des réels/entiers
            temps_acquisition = float(temps_acquisition)
            latitude = float(latitude)
            longitude = float(longitude)
            altitude = float(altitude)
            vitesse = float(vitesse)
            cap = float(cap)
            pas_de_temps = float(pas_de_temps)
        except ValueError:
            popup = QtWidgets.QMessageBox()
            popup.setWindowTitle("Erreur dans la génération de la carte")
            popup.setText("Veuillez entrer des nombres réels pour effectuer les calculs")
            popup.setIcon(QtWidgets.QMessageBox.Warning)
            x = popup.exec()
            return 0
            # Gérer le cas où la valeur n'est pas un flottant valide
        
        ###############
        ### Etape 2 ###
        ###############

        if self.s_min_h_comboBox.currentText() == 'min':
            temps_acquisition = temps_acquisition*60
        elif self.s_min_h_comboBox.currentText() == 'h':
            temps_acquisition = temps_acquisition*3600
        else :
            temps_acquisition = temps_acquisition

        ####################
        ### Etape 3 et 4 ###
        ####################

        if self.trajectoire_selectionnee == 'Rectiligne':
            # Calcul des postisions
            Latitudes,Longitudes,T,liste_cap = generateRectiligne(latitude,longitude,vitesse,cap,temps_acquisition,pas_de_temps)

        elif self.trajectoire_selectionnee == 'Circulaire':
            rayon = self.rayon_textEdit.toPlainText()
            direction = self.choix_direction_circulaire_comboBox.currentText()
            try:
                # On check si toutes les valeurs rentrées sont bien des réels/entiers
                rayon = float(rayon)
            except ValueError:
                popup = QtWidgets.QMessageBox()
                popup.setWindowTitle("Erreur dans la génération de la carte")
                popup.setText("Veuillez entrer un nombre réel pour le rayon de la trajectoire")
                popup.setIcon(QtWidgets.QMessageBox.Warning)
                x = popup.exec()
                return 0
                # Gérer le cas où la valeur n'est pas un flottant valide

            Latitudes,Longitudes,T,liste_cap = generateCirculaire(latitude,longitude,vitesse,cap,rayon,temps_acquisition,pas_de_temps,direction)

        elif self.trajectoire_selectionnee =='Zigzag':
            if self.choix_parametre_zigzag_comboBox.currentText() == 'Nombre de lignes fixe' and self.choix_type_zigzag_comboBox.currentText() == 'Zigzag constant':
                type_zigzag = 'n_adef'
                nombre_ligne = self.nombre_ligne_textEdit_.toPlainText()
                angle_changement = self.angle_zigzag_textEdit.toPlainText()
                direction = self.choix_direction_comboBox.currentText()
                try:
                    # On check si toutes les valeurs rentrées sont bien des réels/entiers
                    nombre_ligne = int(nombre_ligne)
                    angle_changement = float(angle_changement)
                except ValueError:
                    popup = QtWidgets.QMessageBox()
                    popup.setWindowTitle("Erreur dans la génération de la carte")
                    popup.setText("Veuillez entrer un nombre réel pour le rayon de la trajectoire")
                    popup.setIcon(QtWidgets.QMessageBox.Warning)
                    x = popup.exec()
                    return 0
                    # Gérer le cas où la valeur n'est pas un flottant valide
                Latitudes,Longitudes,T,liste_cap = generateZigzag(latitude,longitude,vitesse,cap,temps_acquisition,pas_de_temps,nombre_ligne,0,angle_changement,direction,type_zigzag)

            elif self.choix_parametre_zigzag_comboBox.currentText() == 'Nombre de lignes fixe' and self.choix_type_zigzag_comboBox.currentText() == 'Zigzag angle aléatoire':
                type_zigzag = 'n_alea'
                nombre_ligne = self.nombre_ligne_textEdit_.toPlainText()
                direction = self.choix_direction_comboBox.currentText()
                try:
                    # On check si toutes les valeurs rentrées sont bien des réels/entiers
                    nombre_ligne = int(nombre_ligne)
                except ValueError:
                    popup = QtWidgets.QMessageBox()
                    popup.setWindowTitle("Erreur dans la génération de la carte")
                    popup.setText("Veuillez entrer un nombre réel pour le rayon de la trajectoire")
                    popup.setIcon(QtWidgets.QMessageBox.Warning)
                    x = popup.exec()
                    return 0
                    # Gérer le cas où la valeur n'est pas un flottant valide
                Latitudes,Longitudes,T,liste_cap = generateZigzag(latitude,longitude,vitesse,cap,temps_acquisition,pas_de_temps,nombre_ligne,0,0,direction,type_zigzag)

            elif self.choix_parametre_zigzag_comboBox.currentText() == 'Longueur de la ligne fixe' and self.choix_type_zigzag_comboBox.currentText() == 'Zigzag constant':
                type_zigzag = 'l_adef'
                longueur_ligne = self.longueur_ligne_textEdit.toPlainText()
                angle_changement = self.angle_zigzag_textEdit.toPlainText()
                direction = self.choix_direction_comboBox.currentText()
                try:
                    # On check si toutes les valeurs rentrées sont bien des réels/entiers
                    longueur_ligne = int(longueur_ligne)
                    angle_changement = float(angle_changement)
                except ValueError:
                    popup = QtWidgets.QMessageBox()
                    popup.setWindowTitle("Erreur dans la génération de la carte")
                    popup.setText("Veuillez entrer un nombre réel pour le rayon de la trajectoire")
                    popup.setIcon(QtWidgets.QMessageBox.Warning)
                    x = popup.exec()
                    return 0
                    # Gérer le cas où la valeur n'est pas un flottant valide
                Latitudes,Longitudes,T,liste_cap = generateZigzag(latitude,longitude,vitesse,cap,temps_acquisition,pas_de_temps,0,longueur_ligne,angle_changement,direction,type_zigzag)


            else :
                type_zigzag = 'l_alea'
                longueur_ligne = self.longueur_ligne_textEdit.toPlainText()
                direction = self.choix_direction_comboBox.currentText()
                try:
                    # On check si toutes les valeurs rentrées sont bien des réels/entiers
                    longueur_ligne = int(longueur_ligne)
                except ValueError:
                    popup = QtWidgets.QMessageBox()
                    popup.setWindowTitle("Erreur dans la génération de la carte")
                    popup.setText("Veuillez entrer un nombre réel pour le rayon de la trajectoire")
                    popup.setIcon(QtWidgets.QMessageBox.Warning)
                    x = popup.exec()
                    return 0
                    # Gérer le cas où la valeur n'est pas un flottant valide
                Latitudes,Longitudes,T,liste_cap = generateZigzag(latitude,longitude,vitesse,cap,temps_acquisition,pas_de_temps,0,longueur_ligne,0,direction,type_zigzag)


        elif self.trajectoire_selectionnee == 'Zigzag aléatoire':
            Latitudes,Longitudes,T,liste_cap = generateZigzagAleatoire(latitude,longitude,vitesse,cap,temps_acquisition,pas_de_temps)
            

        elif self.trajectoire_selectionnee == 'Elliptique':
            popup = QtWidgets.QMessageBox()
            popup.setWindowTitle("Elliptique")
            popup.setText("C'est en cours !")
            popup.setIcon(QtWidgets.QMessageBox.Information)
            x = popup.exec()


        elif self.trajectoire_selectionnee == 'Arc':
            rayon_courbure = self.rayon_courbure_textEdit.toPlainText()
            angle_rotation = self.angle_rotation_textEdit.toPlainText()
            direction = self.virage_arc_hippo_u_comboBox.currentText()
            try:
                # On check si toutes les valeurs rentrées sont bien des réels/entiers
                rayon_courbure = float(rayon_courbure)
                angle_rotation = float(angle_rotation)
            except ValueError:
                popup = QtWidgets.QMessageBox()
                popup.setWindowTitle("Erreur dans la génération de la carte")
                popup.setText("Veuillez entrer un nombre réel pour le rayon de courbure de la trajectoire")
                popup.setIcon(QtWidgets.QMessageBox.Warning)
                x = popup.exec()
                return 0
                # Gérer le cas où la valeur n'est pas un flottant valide

            Latitudes,Longitudes,T,liste_cap = generateArc(latitude,longitude,vitesse,cap,rayon_courbure,temps_acquisition,pas_de_temps,angle_rotation,direction)


        elif self.trajectoire_selectionnee == 'Hippodrome':
            rayon_courbure = self.rayon_courbure_textEdit.toPlainText()
            direction = self.virage_arc_hippo_u_comboBox.currentText()
            try:
                # On check si toutes les valeurs rentrées sont bien des réels/entiers
                rayon_courbure = float(rayon_courbure)
            except ValueError:
                popup = QtWidgets.QMessageBox()
                popup.setWindowTitle("Erreur dans la génération de la carte")
                popup.setText("Veuillez entrer un nombre réel pour le rayon de courbure de la trajectoire")
                popup.setIcon(QtWidgets.QMessageBox.Warning)
                x = popup.exec()
                return 0
                # Gérer le cas où la valeur n'est pas un flottant valide

            Latitudes,Longitudes,T,liste_cap = generateHippodrome(latitude,longitude,vitesse,cap,rayon_courbure,temps_acquisition,pas_de_temps,direction)

        elif self.trajectoire_selectionnee == 'Trajectoire U':
            rayon_courbure = self.rayon_courbure_textEdit.toPlainText()
            angle_rotation = self.angle_rotation_textEdit.toPlainText()
            direction = self.virage_arc_hippo_u_comboBox.currentText()
            print(direction,type(direction))
            try:
                # On check si toutes les valeurs rentrées sont bien des réels/entiers
                rayon_courbure = float(rayon_courbure)
                angle_rotation = float(angle_rotation)
            except ValueError:
                popup = QtWidgets.QMessageBox()
                popup.setWindowTitle("Erreur dans la génération de la carte")
                popup.setText("Veuillez entrer des nombres réels")
                popup.setIcon(QtWidgets.QMessageBox.Warning)
                x = popup.exec()
                return 0
                # Gérer le cas où la valeur n'est pas un flottant valide
            Latitudes,Longitudes,T,liste_cap = generateU(latitude,longitude,vitesse,cap,rayon_courbure,angle_rotation,pas_de_temps,temps_acquisition,direction)


        else:
            popup = QtWidgets.QMessageBox()
            popup.setWindowTitle("Erreur dans la génération de la carte")
            popup.setText("Veuillez sélectionner une trajectoire")
            popup.setIcon(QtWidgets.QMessageBox.Warning)
            x = popup.exec()

        ###############
        ### Etape 5 ###
        ###############

        if self.profil_altitude_comboBox.currentText() == 'Constant':
            Z = [float(self.altitude_textEdit.toPlainText()) for i in range(len(T))]

        elif self.profil_altitude_comboBox.currentText() == 'Ascendant':
            vitesse_ascendant = self.vitesse_ascention_textEdit.toPlainText()
            try:
                # On check si toutes les valeurs rentrées sont bien des réels/entiers
                vitesse_ascendant = float(vitesse_ascendant)
            except ValueError:
                popup = QtWidgets.QMessageBox()
                popup.setWindowTitle("Erreur dans la génération de la carte")
                popup.setText("Veuillez entrer des nombres réels")
                popup.setIcon(QtWidgets.QMessageBox.Warning)
                x = popup.exec()
                return 0
                # Gérer le cas où la valeur n'est pas un flottant valide
            Z = getAltitude(altitude,vitesse_ascendant,T,'linéaire','ascendant')
        else :
            vitesse_descendant = self.vitesse_descente_textEdit.toPlainText()
            try:
                # On check si toutes les valeurs rentrées sont bien des réels/entiers
                vitesse_descendant = float(vitesse_descendant)
            except ValueError:
                popup = QtWidgets.QMessageBox()
                popup.setWindowTitle("Erreur dans la génération de la carte")
                popup.setText("Veuillez entrer des nombres réels")
                popup.setIcon(QtWidgets.QMessageBox.Warning)
                x = popup.exec()
                return 0
                # Gérer le cas où la valeur n'est pas un flottant valide
            Z = getAltitude(altitude,vitesse_descendant,T,'linéaire','descendant')

        ###############
        ### Etape 6 ###
        ###############

        if self.trajectoire_checkBox.isChecked() :
            # Définition du nom de la carte
            nom_carte = 'CarteTrajectoire'+ self.trajectoire_selectionnee +str(self.nombre_generation)+'.html'
            # Tracer la carte
            tracerTrajectoireCarte(Latitudes,Longitudes,nom_carte)
            # Afficher la carte
            updated_map_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'Cartes/'+ nom_carte))
            self.carte_trajectoire_webEngineView.load(QtCore.QUrl.fromLocalFile(updated_map_path))

        else :
            # Si ce non coché alors on remet la map vierge de base
            self.carte_trajectoire_webEngineView.load(QtCore.QUrl.fromLocalFile(self.base_map_path))

        if self.points_checkBox.isChecked() :
            # Affichage de la page 2
            self.tabWidget.setTabVisible(1,True)
            # Définition du nom de la carte
            nom_carte = 'CartePoints'+ self.trajectoire_selectionnee + str(self.nombre_generation)+'.html'
            # Tracer la carte
            # tracerPointsCarte(Latitudes,Longitudes,nom_carte)
            # Afficher la carte
            updated_map_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'Cartes/'+ nom_carte))
            self.carte_points_webEngineView.load(QtCore.QUrl.fromLocalFile(updated_map_path))

        else :
            # Si non coché on désactive l'onglet
            self.tabWidget.setTabVisible(1,False)

        if self.affichage_3d_checkBox.isChecked() :
            # Affichage de la page 3
            self.tabWidget.setTabVisible(2,True)
            self.X_3d, self.Y_3d, self.Z_3d = Latitudes, Longitudes, Z
            self.actualiserGraphique()


        else :
            # Si non coché on désactive l'onglet
            self.tabWidget.setTabVisible(2,False)

        if self.trajectoire_temps_reel_checkBox.isChecked() :
            # Affichage de la page 4
            self.tabWidget.setTabVisible(3,True)
            # Définition du nom de la carte
            nom_carte = 'CarteTempsReel'+ self.trajectoire_selectionnee +str(self.nombre_generation)+'.html'
            # Tracer la carte
            tracerCarteDynamique(Latitudes,Longitudes,T,nom_carte)
            # Afficher la carte
            updated_map_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'Cartes/' + nom_carte))
            self.carte_temps_reel_webEngineView.load(QtCore.QUrl.fromLocalFile(updated_map_path))

        else :
            # Si non coché on désactive l'onglet
            self.tabWidget.setTabVisible(3,False)

        ###############
        ### Etape 7 ###
        ###############

        nom_fichier = 'Resultat'+ self.trajectoire_selectionnee +str(self.nombre_generation)+'.txt'
        sauvegarderResultats(Latitudes,Longitudes,Z,T,liste_cap,nom_fichier)
        self.resultats_latitude = Latitudes
        self.resultats_longitude = Longitudes
        self.resultats_altitude = Z
        self.resultats_temps = T
        self.resultats_cap = liste_cap


    def onTelechargeClique(self):
        """
        Fonction pour enregistrer le fichier des resulats à l'endroit où l'utilisateur le souhaite.
        Non fonctionnel pour le moment
        """
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog  # Utilisation de la boîte de dialogue Qt au lieu de celle du système d'exploitation
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(self, "Enregistrer le fichier", "", "Fichiers texte (*.txt)", options=options)


        if file_path:
            # Enregistrez le contenu dans le fichier sélectionné
            telechargerResultats(self.resultats_latitude,self.resultats_longitude,self.resultats_altitude,self.resultats_temps,self.resultats_cap,file_path)

    def erreurTelecharge(self):
        popup = QtWidgets.QMessageBox()
        popup.setWindowTitle("Erreur")
        popup.setText('Nous rencontrons un problème lors du téléchargement des résultats.\nRetrouver votre fichier de résultats dans le dossier "Résultats"')
        popup.setIcon(QtWidgets.QMessageBox.Warning)
        x = popup.exec()
        return 0


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SeaTraj v1.0"))

        self.parcourir_xml_label.setText(_translate("MainWindow", "Sélectionner un fichier XML :"))
        self.parcourir_xml_pushButton.setText(_translate("MainWindow", "Parcourir"))
        self.nom_xml_label.setText(_translate("MainWindow", ""))
        self.modifier_pushButton.setText(_translate("MainWindow", "Modifier"))
        self.lecture_xml_groupBox.setTitle(_translate("MainWindow", "Lecture du fichier"))
        self.latitude_label.setText(_translate("MainWindow", "Latitude (°) :"))
        self.longitude_label.setText(_translate("MainWindow", "Longitude (°) :"))
        self.altitude_label.setText(_translate("MainWindow", "Altitude (m) :"))
        self.vitesse_label.setText(_translate("MainWindow", "Vitesse (m/s) :"))
        self.cap_label.setText(_translate("MainWindow", "Cap (°) :"))
        self.pas_de_temps_label.setText(_translate("MainWindow", "Pas de temps (s) :"))
        self.profil_altitude_label.setText(_translate("MainWindow", "Profil d\'altitude :"))
        self.profil_altitude_comboBox.setItemText(0, _translate("MainWindow", "Constant"))
        self.profil_altitude_comboBox.setItemText(1, _translate("MainWindow", "Ascendant"))
        self.profil_altitude_comboBox.setItemText(2, _translate("MainWindow", "Descendant"))
        self.vitesse_ascention_label.setText(_translate("MainWindow", "Vitesse d\'ascention (m/s) :"))
        self.vitesse_descente_label.setText(_translate("MainWindow", "Vitesse de descente (m/s) :"))
        self.choix_trajectoire_label.setText(_translate("MainWindow", "Entrer la trajectoire à calculer"))
        self.choix_trajectoire_comboBox.setItemText(0, _translate("MainWindow", "..."))
        self.choix_trajectoire_comboBox.setItemText(1, _translate("MainWindow", "Rectiligne"))
        self.choix_trajectoire_comboBox.setItemText(2, _translate("MainWindow", "Circulaire"))
        self.choix_trajectoire_comboBox.setItemText(3, _translate("MainWindow", "Zigzag"))
        self.choix_trajectoire_comboBox.setItemText(4, _translate("MainWindow", "Zigzag aléatoire"))
        self.choix_trajectoire_comboBox.setItemText(5, _translate("MainWindow", "Hippodrome"))
        self.choix_trajectoire_comboBox.setItemText(6, _translate("MainWindow", "Trajectoire U"))
        self.choix_trajectoire_comboBox.setItemText(7, _translate("MainWindow", "Arc"))
        self.rayon_label.setText(_translate("MainWindow", "Rayon (m) :"))
        self.choix_direction_circulaire_label.setText(_translate("MainWindow", "Premier virage :"))
        self.choix_direction_circulaire_comboBox.setItemText(0, _translate("MainWindow", "Gauche"))
        self.choix_direction_circulaire_comboBox.setItemText(1, _translate("MainWindow", "Droite"))
        self.nombre_ligne_label.setText(_translate("MainWindow", "Nombre de lignes :"))
        self.choix_parametre_zigzag_label.setText(_translate("MainWindow", "Choix du paramètre :"))
        self.choix_parametre_zigzag_comboBox.setItemText(0, _translate("MainWindow", "..."))
        self.choix_parametre_zigzag_comboBox.setItemText(1, _translate("MainWindow", "Nombre de lignes fixe"))
        self.choix_parametre_zigzag_comboBox.setItemText(2, _translate("MainWindow", "Longueur de la ligne fixe"))
        self.choix_type_zigzag_label.setText(_translate("MainWindow", "Sélectionner un type de zigzag"))
        self.choix_type_zigzag_comboBox.setItemText(0, _translate("MainWindow", "Zigzag constant"))
        self.choix_type_zigzag_comboBox.setItemText(1, _translate("MainWindow", "Zigzag angle aléatoire"))
        self.nombre_ligne_label.setText(_translate("MainWindow", "Nombre de lignes :"))
        self.angle_zigzag_label_.setText(_translate("MainWindow", "Angle des virages (°) :"))
        self.choix_direction_zigzag_label.setText(_translate("MainWindow", "Premier virage :"))
        self.choix_direction_comboBox.setItemText(0, _translate("MainWindow", "Gauche"))
        self.choix_direction_comboBox.setItemText(1, _translate("MainWindow", "Droite"))
        self.longueur_ligne_label.setText(_translate("MainWindow", "Longueur d\'une ligne (m) :"))
        self.elliptique1_label.setText(_translate("MainWindow", "Paramètre elliptique 1 :"))
        self.elliptique3_label.setText(_translate("MainWindow", "Paramètre elliptique 3 :"))
        self.elliptique3_comboBox.setItemText(0, _translate("MainWindow", "Gauche"))
        self.elliptique3_comboBox.setItemText(1, _translate("MainWindow", "Droite"))
        self.elliptique2_label.setText(_translate("MainWindow", "Paramètre elliptique 2 :"))
        self.rayon_courbure_label.setText(_translate("MainWindow", "Rayon de courbure (m) :"))
        self.angle_rotation_label.setText(_translate("MainWindow", "Angle de rotation (°) :"))
        self.virage_arc_hippo_u_label.setText(_translate("MainWindow", "Premier virage :"))
        self.virage_arc_hippo_u_comboBox.setItemText(0, _translate("MainWindow", "Gauche"))
        self.virage_arc_hippo_u_comboBox.setItemText(1, _translate("MainWindow", "Droite"))
        self.duree_acquisition_label_.setText(_translate("MainWindow", "Durée de l\'acquisition :"))
        self.s_min_h_comboBox.setItemText(0, _translate("MainWindow", "s"))
        self.s_min_h_comboBox.setItemText(1, _translate("MainWindow", "min"))
        self.s_min_h_comboBox.setItemText(2, _translate("MainWindow", "h"))
        self.type_carte_groupBox.setTitle(_translate("MainWindow", "Type de carte :"))
        self.trajectoire_checkBox.setText(_translate("MainWindow", "Trajectoire"))
        self.points_checkBox.setText(_translate("MainWindow", "Points"))
        self.affichage_3d_checkBox.setText(_translate("MainWindow", "Affichage 3D"))
        self.trajectoire_temps_reel_checkBox.setText(_translate("MainWindow", "Trajectoire en temps réel"))
        self.generer_pushButton.setText(_translate("MainWindow", "Générer"))
        self.telecharger_resultats_pushButton.setText(_translate("MainWindow", "Télécharger les résultats"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.page1), _translate("MainWindow", "Carte trajectoire"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.page2), _translate("MainWindow", "Carte des points"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.page3), _translate("MainWindow", "Affichage 3D"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.page4), _translate("MainWindow", "Carte en temps réel"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.page5), _translate("MainWindow", "Modifier"))
        self.enregistrer_xml_pushButton.setText(_translate("MainWindow", "Enregistrer"))

class GraphWidget(QtWidgets.QWidget):
    def __init__(self):
        super(GraphWidget, self).__init__()

        # Créer une figure Matplotlib
        self.fig = plt.figure()

        # Créer un axe 3D
        self.ax = self.fig.add_subplot(111, projection='3d')

        # Créer un canvas Matplotlib pour afficher la figure
        self.canvas = FigureCanvas(self.fig)

        # Créer un layout vertical pour le widget
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.canvas)

        # Appliquer le layout au widget
        self.setLayout(layout)

    def actualiserCoordonnees(self, X, Y, Z):
        # Tracer le graphique 3D avec les nouvelles données
        X = np.array(X)
        Y = np.array(Y)
        Z = np.array(Z)
        self.ax.clear()
        self.ax.scatter(X, Y, Z)

        # Ajouter des légendes pour les axes X, Y et Z
        self.ax.set_xlabel('Latitudes (°)')
        self.ax.set_ylabel('Longitudes (°)')
        self.ax.set_zlabel('Altitude (m)')

        # Mettre à jour le canvas pour afficher la nouvelle figure
        self.canvas.draw()